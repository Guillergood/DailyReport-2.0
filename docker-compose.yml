version: '3.3'

services:
  # Servicio de mongodb para guardar los datos
  # con la imagen de bitnami de mongodb
  # indicando que usa una red para comunicarse con el proyecto
  # mapeando el puerto 27017 al mismo puerto
  mongodb:
    image: 'bitnami/mongodb:latest'
    container_name: "mongodb"
    networks:
      - dailyreport-network
    ports:
      - 27017:27017

  # Servicio del proyecto que construye el contenedor con el DockerfileTest
  # utilizando la misma red que el servicio mongodb.
  # Además utiliza los archivos locales como volumen para poder cambiarlos
  # sin necesidad de reconstruir todo de nuevo. Y la carpeta "log" para sacar el log del servicio
  # Indicamos que el servicio se liga con mongodb
  # Indicamos unas variables de entorno necesarias para configurar Spring con mongodb
  # y optimizar las conexiones del proyecto.
  # Por último, el servicio depende de mongodb y se mapea el puerto 8080 al mismo puerto
  dailyreport:
    build: .
    image: dailyreport-2.0
    networks:
      - dailyreport-network
    container_name: "dailyreport-2.0"
    volumes:
      - ./:/app/test
      - ./log:/log
    links:
      - mongodb
    environment:
      - ADDITIONAL_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=27017
      - MONGODB_HOST=mongodb
      - MONGODB_PORT=27017
    depends_on:
      - mongodb
    ports:
      - 8080:8080

# Se crea una nueva red para ligar ambos servicios.
networks:
  dailyreport-network:
    driver: bridge
